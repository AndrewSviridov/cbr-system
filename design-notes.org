* Application design
The main parts of the application are the Case and Attribute classes
(and subclasses of the latter). The Case class defines an entire case,
and how to match it to another case. Each attribute is represented by
an appropriate Attribute subclass, which defines how to match values for
this attribute to each other, whether or not to adapt attribute
values, etc.

* Comparison functions
The subclasses of the Attribute class define how to match attributes
to each other. Subclasses are defined for each type of matching (e.g.
exact matching, less is perfect matching, etc), and for adaptation
types (e.g. numerical adaptation). Classes are defined for the
attribute names which inherit the corresponding matching classes,
setting relevant parameters.

** HolidayType
Manual grouping
** Price
Distance - less is perfect
** NumberOfPersons
Only match exact number - adapt others
** Region
Geographical matching based on geopy.
Combine with type of place?
** Transportation
Conditional comparison, i.e. substitute planes for other modes if the
journey is sufficiently short?
** Duration
Linear matching + adaptation.
** Season
Match summer/winter/spring/autumn, unless month is adjacent.
** Accommodation
Linear distance, more is perfect.
** Hotel
If selected, only match on perfect match.
* Adaptation of results
Adapt price for number of persons and duration (semi)linearly.
* Interface
Console (readline-ish) interface.
